name: Validation CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "*/15 * * * *"  
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref == 'refs/heads/master' }}

jobs:
  changes:
    name: Check for file changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      ci: ${{ steps.filter.outputs.ci }}
      dependencies: ${{ steps.filter.outputs.dependencies }}
      historical_data: ${{ steps.filter.outputs.historical_data }}
      markdown: ${{ steps.filter.outputs.markdown }}
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: resources/config/paths-filter.yaml
          list-files: 'shell'

  dependencies-check:
    name: Check depencencies
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Renovate
        uses: renovatebot/github-action@v41.0.17
        with:
          configurationFile: 'resources/config/renovate.json'
          token: ${{ secrets.RENOVATE_TOKEN }}
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: 'resources/config/dependency-review.yaml'
          base-ref: ${{ github.event.pull_request.base.sha || 'master' }}
          head-ref: ${{ github.event.pull_request.head.sha || github.ref }}

  test-format:
    name: Check formatting
    needs: [changes]
    if:  >-
      ${{
        needs.changes.outputs.ci == 'true' ||
        needs.changes.outputs.dependencies == 'true' ||
        needs.changes.outputs.historical_data == 'true' ||
        needs.changes.outputs.rust == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Restore cargo cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-
            cargo-${{ runner.os }}-
      - name: Load the Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Ensure proper formatting
        run: cargo fmt --check

  test-lint-python:
    name: Lint the Python code
    needs: [changes]
    if: >-
      ${{
        github.event.action == 'prerelease' ||
        github.event.action == 'published' ||
        needs.changes.outputs.ci == 'true' ||
        needs.changes.outputs.dependencies == 'true' ||
        needs.changes.outputs.historical_data == 'true' ||
        needs.changes.outputs.rust == 'true'
      }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          cache-dependency-path: 'resources/deps/pip_requirements.txt'
          python-version: '3.13'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r resources/deps/pip_requirements.txt
      - name: Lint with pylint
        run: |
          for file in $(git ls-files '*.py'); do
            printf 'Linting %s at %s.' "${file}" "$(date)"
            pylint "${file}"
          done

  test-lint-rust:
    name: Lint the Rust code
    needs: [changes]
    if:  >-
      ${{
        needs.changes.outputs.ci == 'true' ||
        needs.changes.outputs.dependencies == 'true' ||
        needs.changes.outputs.historical_data == 'true' ||
        needs.changes.outputs.rust == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Restore cargo cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-
            cargo-${{ runner.os }}-
      - name: Load the Rust toolchain
        uses: dtolnay/rust-toolchain@stable      
      - name: Install font dependency
        run: |
          sudo apt-get -qq update
          sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y --no-install-recommends "$(cat resources/deps/apt_dependencies.txt)"
      - name: Run linter
        run: cargo clippy --all-targets --all-features -- -D warnings

  test-lint-yaml:
    name: Lint the yaml code
    needs: [changes]
    if: >-
      ${{
        github.event.action == 'prerelease' ||
        github.event.action == 'published' ||
        needs.changes.outputs.ci == 'true' ||
        needs.changes.outputs.dependencies == 'true' ||
        needs.changes.outputs.historical_data == 'true' ||
        needs.changes.outputs.rust == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Lint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -color -verbose
        shell: bash

  test-markdown:
    name: Check markdown
    needs: [changes]
    if: >-
      ${{
        needs.changes.outputs.ci == 'true' ||
        needs.changes.outputs.markdown == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Check spelling
        uses: rojopolis/spellcheck-github-actions@v0
        with:
          config_path: 'resources/config/spellcheck.yaml'
      - name: Lint the markdown
        uses: avto-dev/markdown-lint@v1
        with:
          config: 'resources/config/markdownlint.yaml'
          args: '*.md'

  test-run:
    name: Run the compiled binary
    needs: [changes]
    if: >-
      ${{
        needs.changes.outputs.ci == 'true' ||
        needs.changes.outputs.dependencies == 'true' ||
        needs.changes.outputs.historical_data == 'true' ||
        needs.changes.outputs.rust == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Calculate a hash of Cargo.lock
        run: sha256sum Cargo.lock | tee cargo_lock_before.sha256
      - name: Restore cargo cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-
            cargo-${{ runner.os }}-
      - name: Load the Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install font dependency
        run: |
          sudo apt-get -qq update
          sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y --no-install-recommends libfontconfig1-dev
      - name: Check
        run: cargo check --verbose
      - name: Build binary
        run: cargo build --verbose
      - name: Hash binary
        run: sha256sum target/debug/btracker
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: btracker
          path: target/debug/btracker
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: Install Python deps
        run: pip install pandas yfinance
      - name: Update data
        run: python src/util/update_data.py
      - name: Run binary
        run: cargo run --verbose
      - name: Hash output
        run: sha256sum output/*
      - name: Upload output artifact
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: output/
      - name: Save cargo cache
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Check if Cargo.lock changed
        run: |
          sha256sum Cargo.lock | tee cargo_lock_after.sha256
          if ! cmp -s cargo_lock_before.sha256 cargo_lock_after.sha256; then
            echo "Cargo.lock has changed!"
            cat Cargo.lock
            exit 1
          fi
          rm cargo_lock_before.sha256 cargo_lock_after.sha256
          
  test-output-csv:
    name: Check output CSVs
    needs: [changes, test-format, test-lint-python, test-lint-rust, test-lint-yaml, test-run]
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Download output artifact
        uses: actions/download-artifact@v4
        with:
          name: output
          path: btracker_output
      - name: CSV Blueprint for price analytics
        uses: jbzoo/csv-blueprint@master
        with:
          csv: btracker_output/processed_data.csv
          schema: resources/config/csv-schema-output-price-analytics.yaml
      - name: CSV Blueprint for yearly summary
        uses: jbzoo/csv-blueprint@master
        with:
          csv: btracker_output/yearly_summary.csv
          schema: resources/config/csv-schema-output-yearly-summary.yaml
      - name: CSV Blueprint for histogram
        uses: jbzoo/csv-blueprint@master
        with:
          csv: btracker_output/histogram.csv
          schema: resources/config/csv-schema-output-histogram.yaml

  test-output-html:
    name: Check output HTML
    needs: [changes, test-format, test-lint-python, test-lint-rust, test-lint-yaml, test-run]
    if: >-
      ${{ 
        needs.changes.outputs.ci == 'true' || 
        needs.changes.outputs.dependencies == 'true' || 
        needs.changes.outputs.historical_data == 'true' ||
        needs.changes.outputs.rust == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Download output artifact
        uses: actions/download-artifact@v4
        with:
          name: output
          path: btracker_output
      - name: Display HTML content
        run: |
          echo 'Displaying the first 500 lines of HTML'
          head -500 btracker_output/index.html
          echo 'Displaying the last 100 lines of HTML'
          tail -100 btracker_output/index.html
      - uses: anishathalye/proof-html@v2
        with:
          directory: ./btracker_output

  deploy:
    name: Deploy HTML to GitHub Pages
    needs: [changes, test-format, test-lint-python, test-lint-rust, test-lint-yaml, test-run, test-output-csv, test-output-html]
    if: >-
      ${{ 
        github.ref == 'refs/heads/master' && 
        (
          needs.changes.outputs.ci == 'true' || 
          needs.changes.outputs.dependencies == 'true' || 
          needs.changes.outputs.historical_data == 'true' ||
          needs.changes.outputs.rust == 'true'
        ) 
      }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download output artifact
        uses: actions/download-artifact@v4
        with:
          name: output
          path: btracker_output
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./btracker_output
          publish_branch: gh-pages
